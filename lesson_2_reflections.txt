Lesson Two reflections:
What happens when you initialize a repository? Why do you need to do it?
Creates the hidden .git directory, includes metadata
Can't track changes in a repository that doesn't exist!

How can you use the staging area to make sure you have one commit per logical change?
Add all incremental updates into staging, but don't actually run the commit until everything you want added has been staged.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Stealing an example from the text, testing experimental features, checking to see if the feature works and should be introduced into master.
Creating a new branch for something like this creates distinct versions that never touch.

How do the diagrams help you visualize the branch structure?
They create a graphical way to see branches and how commits relate to the various branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The resulting code incorporates everything that has been changed in the new branch into the destination (e.g. Master).
git doesn't really give a good visualization of the flow of a merge; diagramming it out makes it easier to understand what's being merged and where the shared parent was.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging: faster, should make merging easier
Manual merging: safer, you control what lines are merged, and get to double-verify that the wanted changes are made
